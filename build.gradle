//
// thunder gradle build file
// lishaoyan@weshare. June, 2015
//

buildscript {
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/snapshot" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.3.RELEASE"
        classpath 'org.springframework:springloaded:1.2.4.BUILD-SNAPSHOT'
    }
}

repositories {
    mavenCentral()
}

ext {
    springVersion = "4.1.6.RELEASE"
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'war'

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

group = 'thunder'
version = '1.0'
description = "weshare thunder service"

war {
    archiveName = "thunder.war"
}

// generate build information
task buildinfo << {
//    println "generate buildinfo property file"
    def buildver = ""
    def tag = ""
    try {
        def revision = 'git rev-list --count HEAD'.execute().text.trim()
        def hash = 'git rev-parse --short HEAD'.execute().text.trim()
        buildver = "r${revision}-${hash}"
        tag = 'git describe --tags'.execute().text.trim()
    } catch(any) {
        println "warn! failed to get revision"
    }

    new File("src/main/resources/properties/buildinfo.properties").withWriter { w->
        w.write("build.module=thunder\n")
        w.write("build.revision=" + buildver + "\n")
        w.write("build.tag=" + tag + "\n")
        w.write("build.datetime =" + (new Date()).format("YYYY-MM-dd HH:mm:ss") + "\n")
        w.write("build.timestamp =" + (int)((new Date()).getTime()/1000) + "\n")
    }
}
processResources.dependsOn buildinfo

// support multiple profiles
ext {
    profile = project.hasProperty('profile') ? project['profile'] : "dev"
}

def loadGroovyConfig(){
    println (":profile " + profile)
    def configFile = file('config.groovy')
    new ConfigSlurper(profile).parse(configFile.toURL()).toProperties()
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: loadGroovyConfig() )
    }
}
//
// bootrun will use buildout resources
bootRun {
    addResources = false
}

dependencies {
//    compile fileTree(dir: "libs", include: "*.jar")
    compile "org.springframework.boot:spring-boot-starter-web:1.2.3.RELEASE"

    compile "org.springframework:spring-core:${springVersion}"
    compile "org.springframework:spring-web:${springVersion}"
    compile "org.springframework:spring-webmvc:${springVersion}"
    compile "org.springframework:spring-aop:${springVersion}"
    compile "org.springframework:spring-orm:${springVersion}"
//    compile "org.springframework:spring-context:${springVersion}"

//    compile 'org.springframework.data:spring-data-redis:1.5.0.RELEASE'
//    compile 'org.springframework.amqp:spring-amqp:1.4.5.RELEASE'
//    compile 'org.springframework.amqp:spring-rabbit:1.4.5.RELEASE'

    compile 'mysql:mysql-connector-java:5.1.35'
    compile 'org.apache.commons:commons-dbcp2:2.1'
    compile "org.mybatis:mybatis-spring:1.2.2"
    compile "org.mybatis:mybatis:3.2.8"
//    compile 'redis.clients:jedis:2.7.0'
//    compile 'org.quartz-scheduler:quartz:2.2.1'
//
    compile "ch.qos.logback:logback-core:1.1.3"
    compile "ch.qos.logback:logback-classic:1.1.3"
    compile "com.googlecode.sli4j:sli4j-slf4j-logback:2.0"
//    compile 'dom4j:dom4j:1.6'
    compile 'org.apache.httpcomponents:httpclient:4.4.1'
    compile 'org.apache.httpcomponents:httpcore:4.4.1'
    compile 'com.google.code.gson:gson:2.3.1'

    compile "javax.servlet:jstl:1.2"
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat:1.2.3.RELEASE'
//
//    testCompile "junit:junit:4.11"
//    testCompile "org.springframework:spring-test:${springVersion}"
}